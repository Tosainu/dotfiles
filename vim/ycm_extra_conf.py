from subprocess import Popen, PIPE
import os
import re
import ycm_core

# These are the compilation flags that will be used in case there's no
# compilation database set (by default, one is not set).
# CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.
default_flags = [
    '-Wall',
    '-Wextra',
    '-pedantic',
    '-DNDEBUG',
    '-I', '.',
]

filetype_flags = {
    'c': ['-x', 'c', '-std=c11'],
    'cpp': ['-x', 'c++', '-std=c++14'],
}

# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
compilation_database_folder = 'build/'

if os.path.exists(compilation_database_folder):
    database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
    database = None


def GetDefaultSearchList(flags):
    p = Popen(['clang', '-E'] + flags + ['-', '-v'], stdout=PIPE, stderr=PIPE)
    _, stderr = p.communicate()
    search_list = re.search(
        '#include <\.\.\.> search starts here:\n(.+)\nEnd of search list',
        stderr.decode(),
        re.DOTALL)
    return [s.strip() for s in search_list.group(1).splitlines()]


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)

    new_flags = []
    make_next_absolute = False
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in ['-isystem', '-I', '-iquote', '--sysroot=']:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        new_flags.append(new_flag)
    return new_flags


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have
    # entries for header files. So we do our best by asking the db for flags
    # for a corresponding source file, if any. If one exists, the flags
    # for that file should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(
                    replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)


def FlagsForFile(filename, **kwargs):
    flags = []

    client_data = kwargs['client_data']
    filetype = client_data.get('&filetype', '')
    if filetype in filetype_flags:
        flags.extend(filetype_flags[filetype])

        for path in GetDefaultSearchList(filetype_flags[filetype]):
            flags.extend(['-isystem', path])

    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(filename)
        if not compilation_info:
            return None

        flags.extend(compilation_info.compiler_flags_)
        workdir = compilation_info.compiler_working_dir_
    else:
        flags.extend(default_flags)
        workdir = os.path.dirname(os.path.abspath(__file__))

    return {
        'flags': MakeRelativePathsInFlagsAbsolute(flags, workdir),
        'do_cache': True
    }
