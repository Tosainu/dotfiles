" skip when vim-tiny or vim-small
if 0 | endif

scriptversion 4

" basic settings {{{
" encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,latin1
set fileformats=unix,dos,mac

scriptencoding utf-8

" vimrc augroup
augroup MyVimrc
  autocmd!
augroup END

function! s:get_SID() abort
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeget_SID$')
endfunction
let s:SID = s:get_SID()
delfunction s:get_SID

set breakindent
let &showbreak = '» '
set colorcolumn=100
set cursorline
set list listchars=tab:>-,trail:-,eol:¬,nbsp:%
set ruler
set title
set laststatus=2
set showtabline=2
set scrolloff=5
set background=dark
set fillchars-=vert:\|
set foldlevel=99 foldmethod=syntax nofoldenable
set matchpairs& matchpairs+=<:>
set noerrorbells visualbell t_vb=
set shortmess& shortmess+=I shortmess+=c
set equalalways
set lazyredraw
set switchbuf=useopen,usetab,newtab
set showcmd
set ttimeoutlen=100

set backspace=indent,eol,start
set completeopt=menuone,noinsert,noselect,popup
set nrformats=bin,hex,unsigned

set expandtab smarttab
set smartindent
set shiftwidth=2 softtabstop=2 tabstop=2
set shiftround

set ignorecase smartcase
set incsearch
set hlsearch
set wrapscan

set cedit=<C-c>
set wildmenu wildmode=longest,full
set wildignorecase

if has('unnamedplus')
  set clipboard=unnamedplus
elseif has('clipboard')
  set clipboard=unnamed
endif

set history=1000
set viminfo& viminfo+=n~/.vim/viminfo
silent! call mkdir(expand('~/.vim'), 'p', 0o700)

let s:cache_dir = isdirectory($XDG_CACHE_DIR) ? $XDG_CACHE_DIR : expand('~/.cache')
let s:runtime_dir = isdirectory($XDG_RUNTIME_DIR) ? $XDG_RUNTIME_DIR : s:cache_dir

set nobackup nowritebackup
let &g:backupdir = s:runtime_dir .. '/vim/backup//'
silent! call mkdir(&g:backupdir, 'p', 0o700)

set swapfile
let &g:directory = s:runtime_dir .. '/vim/swap//'
silent! call mkdir(&g:directory, 'p', 0o700)

if has('persistent_undo')
  set undofile
  let &g:undodir = s:cache_dir .. '/vim/undo//'
  silent! call mkdir(&g:undodir, 'p', 0o700)

  autocmd MyVimrc BufNewFile,BufRead /tmp/*,/var/tmp/* setlocal noundofile
endif

" jump to the last known cursor position
autocmd MyVimrc BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
      \   exe "normal! g`\"" |
      \ endif

" disable automatic comment insertion
autocmd MyVimrc BufEnter,FileType * call timer_start(0, {->
      \   execute('setlocal formatoptions-=r formatoptions-=o')
      \ })

" add execute permission to script file
autocmd MyVimrc BufWritePost * call s:make_script_executable()
function! s:make_script_executable() abort
  let b:make_script_executable_checked = get(b:, 'make_script_executable_checked', {})
  const file = expand('<afile>:p')
  if get(b:make_script_executable_checked, file) == 0
        \ && getline(1) =~# '^#![^[]'
        \ && !executable(file)
        \ && (input(printf('chmod +x %s?[y/n]', file)) ==? 'y')
    silent! execute '!chmod +x ' .. shellescape(file)
    edit
  endif
  let b:make_script_executable_checked[file] = 1
endfunction

" cursor shape
if has('cursorshape') && has('vim_starting') && &term =~# '^\%(xterm\|alacritty\)'
  let &t_EI ..= "\e[\x30 q"
  let &t_SI ..= "\e[\x35 q"
  let &t_SR ..= "\e[\x33 q"
endif

" ibus
if $GTK_IM_MODULE ==# 'ibus' && executable('ibus')
  function! s:switch_ibus_engine(engine) abort
    silent const engine = systemlist('ibus engine')[0]
    if engine !=# a:engine
      silent execute '!ibus engine ' .. a:engine
    endif
  endfunction
  autocmd MyVimrc InsertLeave * call s:switch_ibus_engine('xkb:us::eng')
endif

if $GTK_IM_MODULE ==# 'fcitx' && executable('fcitx5-remote')
  autocmd MyVimrc InsertLeave * silent execute '!fcitx5-remote -c'
endif

filetype plugin indent on
" }}}

" keymappings {{{
let g:mapleader = ','

" disable arrow keys
noremap <Up>    <Nop>
noremap <Down>  <Nop>
noremap <Left>  <Nop>
noremap <Right> <Nop>
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

" disable EX-mode
nnoremap  Q <Nop>
nnoremap gQ <Nop>

" disable <F1>
noremap <F1> <Nop>
inoremap <F1> <Nop>

" change window size
nnoremap <S-Up>    <C-W>-
nnoremap <S-Down>  <C-W>+
nnoremap <S-Left>  <C-W><
nnoremap <S-Right> <C-W>>

" navigate window
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" emacs-like cursor move in command-line mode
cnoremap <C-a>  <Home>
cnoremap <C-e>  <End>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-p>  <Up>
cnoremap <C-n>  <Down>
if has('unix') && !has('gui_running')
  cmap <Esc>b <M-b>
  cmap <Esc>f <M-f>
endif
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>

nnoremap n nzvzz
nnoremap N Nzvzz
nnoremap * *zvzz
nnoremap # *zvzz

" search in new window
nnoremap <expr> <C-w>* "\<C-w>" .. (winwidth(0) > 160 ? "v" : "s") .. "*"
nnoremap <expr> <C-w># "\<C-w>" .. (winwidth(0) > 160 ? "v" : "s") .. "#"

" clear search highlights
nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>

" tab
nnoremap <silent> <C-n> :<C-u>tabnew<CR>

" select completion result
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" toggle line number
nnoremap <silent> <Leader>n :<C-u>setlocal number!<CR>

nnoremap <silent> <Leader>lf :<C-u>lfirst<CR>
nnoremap <silent> <Leader>ll :<C-u>llast<CR>
nnoremap <silent> <Leader>ln :<C-u>lnext<CR>
nnoremap <silent> <Leader>lp :<C-u>lprevious<CR>
nnoremap <silent> <Leader>lF :<C-u>cfirst<CR>
nnoremap <silent> <Leader>lL :<C-u>clast<CR>
nnoremap <silent> <Leader>lN :<C-u>cnext<CR>
nnoremap <silent> <Leader>lP :<C-u>cprevious<CR>
" }}}

" commands {{{
" https://sanctum.geek.nz/arabesque/vim-command-typos/
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file WQ wq<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang WA wa<bang>
command! -bang Wa wa<bang>
command! -bang WQa wqa<bang>
command! -bang Wqa wqa<bang>

" open .vimrc
command! Vimrc execute 'tabedit' resolve($MYVIMRC)
" }}}

" Terminal {{{
autocmd MyVimrc TerminalWinOpen * setlocal nobreakindent nowrap bufhidden=hide

def! s:open_terminal(new: bool, args: string)
  const height = &lines * 2 / 3
  const width = &columns - 4

  const terminals = filter(term_list(), (idx, val) =>
    bufwinnr(val) == -1 && term_getstatus(val) =~# 'running' && getbufvar(val, 'terminal_popup_window', 0)
  )

  var buf = -1
  if new || empty(terminals) || !empty(args)
    buf = term_start(empty(args) ? &shell : args, {
      hidden: 1,
      norestore: 1,
      term_cols: width,
      term_rows: height,
      term_finish: 'close',
    })
    setbufvar(buf, 'terminal_popup_window', 1)
  else
    buf = terminals[0]
    term_setsize(buf, height, width)
  endif

  var title = bufname(buf)
  if !empty(term_gettitle(buf))
    title ..= $' [{term_gettitle(buf)}]'
  endif

  const win = popup_create(buf, {
    border: [],
    maxheight: height,
    maxwidth: width,
    minheight: height,
    minwidth: width,
    pos: 'center',
    title: title,
    zindex: 200,
  })

  win_execute(win, 'setlocal nobreakindent nowrap bufhidden=hide')
  win_execute(win, $'tnoremap <buffer><silent> <C-z> <C-\><C-n>:<C-u>call popup_close({win})<CR>')
  if term_getstatus(buf) =~# 'normal'
    win_execute(win, 'normal! i')
  endif
enddef
command! -bang -complete=shellcmd -nargs=* Term call s:open_terminal(<bang>0, <q-args>)

set termwinkey=<C-q>
tnoremap <silent> <C-q><C-n> <C-\><C-n>

nnoremap <silent> <Leader>w :<C-u>Term<CR>
nnoremap <silent> <Leader>W :<C-u>Term!<CR>
" }}}

" format on save {{{
let g:format_on_save = 0

function! s:format_on_save() abort
  return get(b:, 'format_on_save', g:format_on_save)
endfunction

function! s:print_format_on_save_status() abort
  echo printf('Format on save (buffer/global): %s/%s',
        \   s:format_on_save() ? 'enabled' : 'disabled',
        \   g:format_on_save   ? 'enabled' : 'disabled'
        \ )
endfunction
command! FormatOnSaveStatus call s:print_format_on_save_status()

function! s:toggle_format_on_save(global) abort
  if a:global
    let g:format_on_save = !g:format_on_save
  else
    let b:format_on_save = !s:format_on_save()
  endif
  call s:print_format_on_save_status()
endfunction
command! -bang FormatOnSaveToggle call s:toggle_format_on_save(<bang>0)
nnoremap <silent> <Leader>p :<C-u>FormatOnSaveToggle<CR>
nnoremap <silent> <Leader>P :<C-u>FormatOnSaveToggle!<CR>

autocmd MyVimrc BufWritePre * if s:format_on_save() | call s:do_format() | endif
function s:do_format() abort
  if exists(':YcmCompleter') &&
        \ (
        \   (&ft =~# '^\%(c\|cpp\)$' && filereadable('.clang-format')) ||
        \   &ft =~# '^\%(rust\)$'
        \ )
    YcmCompleter Format
  elseif exists('*clang_format#replace') &&
        \ &ft =~# '^\%(c\|cpp\|objc\|proto\|arduino\)$'
    silent! call clang_format#replace(1, line('$'))
  elseif exists(':RustFmt') &&
        \ &ft =~# '^\%(rust\)$'
    RustFmt
  endif
endfunction
" }}}

" Filetype {{{
" C++ {{{
autocmd MyVimrc FileType c,cpp setlocal cindent cinoptions& cinoptions+=g0,m1,j1,(0,ws,Ws,N-s
autocmd MyVimrc BufReadPost /usr/include/c++/* setlocal filetype=cpp
autocmd MyVimrc BufNewFile,BufRead .clang-format setlocal filetype=yaml

" }}}

" C++ & Rust {{{
" http://rhysd.hatenablog.com/entry/2013/12/10/233201#namespace
function! s:expand_semicolon() abort
  const s = getline('.')[0:col('.') - 2]
  if s =~# '\<b;$'      " b;; => boost::
    return "\<BS>oost::"
  elseif s =~# '\<s;$'  " s;; => std::
    return "\<BS>td::"
  elseif s =~# '\<d;$'  " d;; => detail::
    return "\<BS>etail::"
  elseif s =~# ';$'     " ;;  => ::
    return "\<BS>::"
  else
    return ';'
  endif
endfunction
autocmd MyVimrc FileType cpp,rust inoremap <silent><buffer><expr> ; <SID>expand_semicolon()
" }}}

" Haskell {{{
let g:hs_highlight_boolean    = 1
let g:hs_highlight_delimiters = 1
let g:hs_highlight_more_types = 1
let g:hs_highlight_types      = 1
" }}}

" Markdown {{{
let g:markdown_fenced_languages = [
      \   'c',
      \   'cpp',
      \   'css',
      \   'haskell',
      \   'html',
      \   'python',
      \   'ruby',
      \   'rust',
      \   'scss',
      \   'sh',
      \   'vim',
      \ ]
autocmd MyVimrc FileType markdown setlocal tabstop=4 shiftwidth=4 softtabstop=4
" }}}

" Earthfile {{{
autocmd MyVimrc FileType Earthfile setlocal tabstop=4 shiftwidth=4 softtabstop=4 nosmartindent autoindent
" }}}

" Vim {{{
autocmd MyVimrc FileType vim call s:on_vim_files()
function! s:on_vim_files() abort
  " search vim help for word under cursor
  setlocal keywordprg=:help

  setlocal foldmethod=marker
endfunction
" }}}

" binary files {{{
autocmd MyVimrc BufReadPost * if &binary | call s:on_binary_files() | endif
function! s:on_binary_files() abort
  silent %!xxd -g 1
  setlocal filetype=xxd

  autocmd MyVimrc BufWritePre  <buffer> %!xxd -r
  autocmd MyVimrc BufWritePost <buffer> silent %!xxd -g 1
  autocmd MyVimrc BufWritePost <buffer> setlocal nomodified
endfunction
" }}}

" quickfix {{{
autocmd MyVimrc FileType qf nnoremap <buffer><silent> q :<C-u>cclose <bar> lclose<CR>
" }}}

" help {{{
autocmd MyVimrc FileType help nnoremap <buffer><silent> q :<C-u>q<CR>
" }}}

" command-line window {{{
autocmd MyVimrc CmdwinEnter * call s:on_command_line_window()
function! s:on_command_line_window() abort
  nnoremap <buffer><silent> q     :<C-u>q<CR>
  nnoremap <buffer><silent> <Esc> :<C-u>q<CR>
endfunction
" }}}

" gitcommit {{{
autocmd MyVimrc FileType gitcommit setlocal spell
autocmd MyVimrc VimEnter COMMIT_EDITMSG if getline(1) ==# '' | execute 1 | startinsert | endif
" }}}
" }}}

" colorscheme {{{
syntax on

" https://gist.github.com/XVilka/8346728#detection
let s:supports_truecolor =
      \ has('termguicolors') && $COLORTERM =~# '^\%(truecolor\|24bit\)$'
if s:supports_truecolor
  if &t_8f ==# '' || &t_8b ==# ''
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
  set termguicolors
endif

let g:colorsbox_italic = 1

function! s:reset_colorscheme() abort
  if exists('g:terminal_ansi_colors')
    unlet g:terminal_ansi_colors
  endif

  let colorschemes = {
        \   'dark':  ['colorsbox-stbright', 'slate', 'desert'],
        \   'light': ['github', 'github', 'zellner'],
        \ }
  const background = &background
  const index = s:supports_truecolor || has('gui_running') ? 0 : &t_Co == 256 ? 1 : 2
  try
    execute 'colorscheme' colorschemes[background][index]
  catch
    if s:supports_truecolor
      set termguicolors&
    endif
    execute 'colorscheme' colorschemes[background][2]
  endtry

  if (&termguicolors || has('gui_running')) && !exists('g:terminal_ansi_colors')
    let g:terminal_ansi_colors = [
          \   '#4c5359', '#e63250',
          \   '#a5d862', '#e5ae49',
          \   '#66a6cc', '#a370cc',
          \   '#7accc2', '#d9d9d9',
          \   '#82878c', '#ff3759',
          \   '#b9f26e', '#ffc251',
          \   '#73bbe5', '#b77ee5',
          \   '#89e5da', '#f1f1f1',
          \ ]
  endif
endfunction

function! s:toggle_background_color() abort
  let &background = (&background ==# 'dark' ? 'light' : 'dark')
  call s:reset_colorscheme()
endfunction
command! ToggleBackgroundColor call s:toggle_background_color()
nnoremap <silent> <Leader>bg :<C-u>ToggleBackgroundColor<CR>

autocmd MyVimrc ColorScheme * call s:clear_background_color()
function! s:clear_background_color()
  if !has('gui_running') && &background ==# 'dark'
    highlight Normal ctermbg=NONE guibg=NONE
  endif
endfunction

silent! call s:reset_colorscheme() | call s:clear_background_color()
" }}}

" Plugins {{{
" Disable some pre-installed plugins
let g:loaded_getscriptPlugin  = 1
let g:loaded_gzip             = 1
let g:loaded_logiPat          = 1
let g:loaded_netrwPlugin      = 1
let g:loaded_tar              = 1
let g:loaded_tarPlugin        = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_zip              = 1
let g:loaded_zipPlugin        = 1

" minpac {{{
function! s:init_minpac() abort
  silent! packadd minpac
  while !exists('g:loaded_minpac')
    if input("Failed to load minpac. Would you like to install?[y/n]") !=? 'y'
      return v:false
    endif
    execute '!git clone https://github.com/k-takata/minpac.git ~/.vim/pack/minpac/opt/minpac'
    silent! packadd minpac
  endwhile

  function! s:plugin(plugname, ...) abort
    const opt = extend(copy(get(a:000, 0, {})), {'cond': {-> v:true}}, 'keep')
    if !opt.cond()
      return
    endif
    if type(a:plugname) == v:t_list
      call map(copy(a:plugname), {_, v -> minpac#add(v, opt)})
    else
      call minpac#add(a:plugname, opt)
    endif
  endfunction

  call minpac#init()
  call s:plugin('k-takata/minpac', {'type': 'opt'})

  call s:plugin('AndrewRadev/switch.vim')
  call s:plugin('Yggdroot/indentLine')
  call s:plugin('airblade/vim-gitgutter')
  call s:plugin('ctrlpvim/ctrlp.vim')
  call s:plugin('itchyny/lightline.vim')
  call s:plugin('itchyny/vim-gitbranch')
  call s:plugin('junegunn/vim-easy-align')
  call s:plugin('justinmk/vim-dirvish')
  call s:plugin('rhysd/clever-f.vim')
  call s:plugin('t9md/vim-textmanip')
  call s:plugin('tyru/caw.vim')

  " operator/textobj
  call s:plugin(['kana/vim-operator-user',
        \   'kana/vim-operator-replace',
        \   'rhysd/vim-operator-surround',
        \ ])
  call s:plugin(['kana/vim-textobj-user',
        \   'kana/vim-textobj-entire',
        \   'kana/vim-textobj-line',
        \   'pocke/vim-textobj-markdown',
        \   'sgur/vim-textobj-parameter',
        \ ])

  " colorscheme
  call s:plugin('cormacrelf/vim-colors-github', {'type': 'opt'})
  call s:plugin('mkarmona/colorsbox', {'type': 'opt'})

  " code completion
  call s:plugin('ycm-core/YouCompleteMe', {
        \   'cond': {-> has('python3') && executable('cmake')},
        \   'do': {->
        \     executable('npm') ?
        \       '!./install.py --clang-completer --system-libclang --ts-completer' :
        \       '!./install.py --clang-completer --system-libclang'
        \   }(),
        \   'type': 'opt',
        \ })
  call s:plugin('rhysd/github-complete.vim')

  " snippets
  call s:plugin('SirVer/ultisnips', {
        \   'cond': {-> has('python3')},
        \ })

  " C++
  call s:plugin('rhysd/vim-clang-format', {'cond': {-> executable('clang-format')}})

  " Haskell
  call s:plugin('itchyny/vim-haskell-indent')

  " Markdown
  call s:plugin('plasticboy/vim-markdown')
  call s:plugin('euclio/vim-markdown-composer', {
        \   'cond': {-> executable('cargo')},
        \   'do':   '!cargo build --release --no-default-features --features json-rpc',
        \ })

  " Rust
  call s:plugin('rust-lang/rust.vim')

  call s:plugin('pedrohdz/vim-yaml-folds')

  call s:plugin('Tosainu/earthly.vim', {'branch': 'my-main'})

  call s:plugin('wuelnerdotexe/vim-astro')

  return v:true
endfunction

command! PackInit   call s:init_minpac()
command! PackUpdate if s:init_minpac() | call minpac#update() | endif
command! PackClean  if s:init_minpac() | call minpac#clean()  | endif
command! PackStatus if s:init_minpac() | call minpac#status() | endif

function! s:pack_rebuild() abort
  for [k, v] in items(filter(copy(minpac#getpluglist()), '!empty(v:val.do)'))
    noautocmd let pwd = chdir(v.dir)
    echom 'Rebuilding' k .. '...'
    try
      if type(v.do) == v:t_func
        call call(v.do, ['post-update', k])
      elseif type(v.do) == v:t_string
        execute v.do
      endif
      silent! helptags ./doc
    catch
      echohl ErrorMsg
      echom v:throwpoint
      echom v:exception
      echohl None
    finally
      noautocmd call chdir(pwd)
    endtry
  endfor
endfunction
command! PackRebuild if s:init_minpac() | call s:pack_rebuild() | endif
" }}}

" vim-gitgutter {{{
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs     = 1000
let g:gitgutter_sign_added    = '🞧'
let g:gitgutter_sign_modified = '🢂'
let g:gitgutter_sign_removed  = '🞮'
let g:gitgutter_sign_modified_removed   = g:gitgutter_sign_modified
let g:gitgutter_sign_removed_first_line = g:gitgutter_sign_removed

noremap        [gitgutter]   <Nop>
map  <Leader>g [gitgutter]
nmap [gitgutter]a <Plug>(GitGutterStageHunk)
nmap [gitgutter]d <Plug>(GitGutterUndoHunk)
nmap [gitgutter]g <Plug>(GitGutterPreviewHunk)
nmap [gitgutter]p <Plug>(GitGutterPrevHunk)zvzz
nmap [gitgutter]n <Plug>(GitGutterNextHunk)zvzz

omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

autocmd MyVimrc User GitGutter call s:lightline_update_hunk_summary()
" }}}

" ctrlp.vim {{{
let g:ctrlp_extensions      = ['line']
let g:ctrlp_open_new_file   = 't'
let g:ctrlp_switch_buffer   = 'ET'

let g:ctrlp_user_command = {}
let g:ctrlp_user_command.types = {
      \   1: ['.git', 'git --git-dir=%s/.git ls-files -co --exclude-standard'],
      \ }

if executable('ag')
  let g:ctrlp_user_command.fallback = 'ag %s --nocolor --nogroup -g ""'
  let g:ctrlp_use_caching = 0
endif

let g:ctrlp_status_func = {
      \   'main': s:SID .. 'ctrlp_status_func_main',
      \   'prog': s:SID .. 'ctrlp_status_func_prog',
      \ }

function! s:ctrlp_status_func_main(focus, byfname, regex, prev, item, next, marked) abort
  if !exists('*lightline#statusline')
    return &statusline
  endif
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! s:ctrlp_status_func_prog(str) abort
  if !exists('*lightline#statusline')
    return &statusline
  endif
  return lightline#statusline(0)
endfunction

nnoremap            [ctrlp]   <Nop>
nmap     <Leader><Leader> [ctrlp]
nnoremap <silent>   [ctrlp]b  :<C-u>CtrlPBuffer<CR>
nnoremap <silent>   [ctrlp]f  :<C-u>CtrlP<CR>
nnoremap <silent>   [ctrlp]l  :<C-u>CtrlPLine<CR>
nnoremap <silent>   [ctrlp]r  :<C-u>CtrlPMRU<CR>
" }}}

" lightline.vim {{{
let g:lightline = {
      \   'colorscheme': 'deus',
      \   'active': {
      \     'left':   [['mode'], ['filename', 'readonly', 'modified']],
      \     'right':  [
      \       ['lineinfo'],
      \       ['filetype', 'fileformat'],
      \       ['branch_name', 'hunk_summary']
      \     ],
      \   },
      \   'inactive': {
      \     'left':   [['filename', 'readonly', 'modified']],
      \     'right':  [[], ['filetype', 'fileformat']],
      \   },
      \   'tabline': {
      \     'left':   [['tabs']],
      \     'right':  [['cwd']],
      \   },
      \   'component': {
      \     'cwd':        '%{&columns > 160 ? fnamemodify(getcwd(), ":~") : ""}',
      \     'fileformat': '%{&fenc !=# "" ? &fenc : &enc}[%{&ff}]',
      \     'readonly':   '%{&ro ? "\ue0a2" : ""}',
      \   },
      \   'component_function': {
      \     'branch_name':  s:SID .. 'lightline_branch_name',
      \     'filename':     s:SID .. 'lightline_filename',
      \     'hunk_summary': s:SID .. 'lightline_hunk_summary',
      \     'mode':         s:SID .. 'lightline_mode',
      \   },
      \   'separator':    {'left': "\ue0b0", 'right': "\ue0b2"},
      \   'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"},
      \ }

function! s:lightline_filename() abort
  const fname = expand('%:t')
  return  fname ==# 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
        \ fname !=# '' ? fname : '[No Name]'
endfunction

function! s:lightline_mode() abort
  const fname = expand('%:t')
  return  fname ==# 'ControlP' ? 'CtrlP' :
        \ lightline#mode()
endfunction

function! s:lightline_branch_name() abort
  if winwidth(0) >= 90 && exists('*gitbranch#name') && &filetype !=# 'help'
    const _ = gitbranch#name()
    return _ !=# '' ? "\ue0a0 " .. _ : ''
  else
    return ''
  endif
endfunction

function! s:lightline_hunk_summary() abort
  return winwidth(0) >= 90 ? get(b:, 'hunk_summary', '') : ''
endfunction

function! s:lightline_update_hunk_summary() abort
  const hunks   = GitGutterGetHunkSummary()
  let symbols = [
        \   [g:gitgutter_sign_added,    hunks[0]],
        \   [g:gitgutter_sign_modified, hunks[1]],
        \   [g:gitgutter_sign_removed,  hunks[2]],
        \ ]
  let b:hunk_summary = join(map(filter(symbols, 'v:val[1] > 0'), 'join(v:val)'))
  silent! call lightline#update()
endfunction
" }}}

" vim-easy-align {{{
nmap <Leader>a <Plug>(EasyAlign)
xmap <Leader>a <Plug>(EasyAlign)
"}}}

" vim-dirvish {{{
nmap <Plug>(dirvish_up_) <Plug>(dirvish_up)
autocmd MyVimrc FileType dirvish nmap <buffer><silent> - <Plug>(dirvish_up)
" }}}

" clever-f.vim {{{
let g:clever_f_across_no_line = 1
let g:clever_f_smart_case     = 1
" }}}

" caw.vim {{{
let g:caw_no_default_keymappings = 1
let g:caw_hatpos_skip_blank_line = 1

noremap        [caw]   <Nop>
map  <Leader>c [caw]
nmap [caw]c <Plug>(caw:hatpos:toggle:operator)
xmap [caw]c <Plug>(caw:hatpos:toggle)
nmap [caw]a <Plug>(caw:dollarpos:comment)
nmap [caw]w <Plug>(caw:wrap:toggle:operator)
xmap [caw]w <Plug>(caw:wrap:comment)
" }}}

" switch.vim {{{
let g:switch_mapping = ''
let g:switch_reverse_mapping = ''

nnoremap <silent> <Leader>sw :<C-u>Switch<CR>
" }}}

" indentLine {{{
let g:indentLine_fileType = [
      \   'haskell',
      \   'lua',
      \   'python',
      \   'systemverilog',
      \   'verilog',
      \   'vim',
      \   'yaml',
      \ ]

nnoremap <silent> <Leader>il :<C-u>IndentLinesToggle<CR>
" }}}

" vim-textmanip {{{
let g:textmanip_enable_mappings = 0
xmap <Leader>d <Plug>(textmanip-duplicate-down)
xmap <Leader>D <Plug>(textmanip-duplicate-up)
xmap <C-j>     <Plug>(textmanip-move-down)
xmap <C-k>     <Plug>(textmanip-move-up)
xmap <C-h>     <Plug>(textmanip-move-left)
xmap <C-l>     <Plug>(textmanip-move-right)

nmap <silent> <F10> <Plug>(textmanip-toggle-mode)
xmap <silent> <F10> <Plug>(textmanip-toggle-mode)
" }}}

" YouCompleteMe {{{
let g:ycm_always_populate_location_list = 1
let g:ycm_auto_hover = ''
let g:ycm_complete_in_comments = 1
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_extra_conf_vim_data = ['&filetype']
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_goto_buffer_command = 'new-or-existing-tab'
let g:ycm_key_detailed_diagnostics = ''
let g:ycm_key_list_previous_completion = []
let g:ycm_key_list_select_completion = []
let g:ycm_key_list_stop_completion = ['<C-y>']

function! s:start_ycm() abort
  if executable('clangd')
    let g:ycm_clangd_binary_path = exepath('clangd')
    let g:ycm_clangd_args = [
          \   '--header-insertion=never',
          \ ]
  endif

  for l in systemlist('rustup toolchain list -v')
    if l =~# 'nightly'
      let g:ycm_rust_toolchain_root = split(l)[-1]
      break
    endif
  endfor

  silent! packadd YouCompleteMe
endfunction
command! StartYCM call s:start_ycm()

let g:ycm_language_server =
      \ [
      \   #{
      \     name: 'hie',
      \     cmdline: ['hie-wrapper'],
      \     filetypes: ['haskell'],
      \     project_root_files: ['stack.yaml']
      \   },
      \ ]

nnoremap           [ycm]   <Nop>
nmap     <Leader>x [ycm]
nmap     <silent>  [ycm]h  <Plug>(YCMHover)
nnoremap <silent>  [ycm]f  :<C-u>YcmCompleter FixIt<CR>
nnoremap <silent>  [ycm]p  :<C-u>YcmCompleter Format<CR>
nnoremap <silent>  [ycm]t  :<C-u>YcmCompleter GetType<CR>
nnoremap <silent>  [ycm]d  :<C-u>YcmCompleter GoToDeclaration<CR>
nnoremap <silent>  [ycm]D  :<C-u>YcmCompleter GoToDefinition<CR>
nnoremap <silent>  [ycm]i  :<C-u>YcmCompleter GoToImplementation<CR>
nnoremap <silent>  [ycm]r  :<C-u>YcmCompleter RefactorRename<CR>
" }}}

" UltiSnips {{{
let g:UltiSnipsExpandTrigger        = '<C-f>'
let g:UltiSnipsJumpBackwardTrigger  = '<C-b>'
let g:UltiSnipsJumpForwardTrigger   = '<C-f>'
" }}}

" vim-operator-user {{{
autocmd MyVimrc VimEnter * call s:init_user_defined_operators()
function! s:init_user_defined_operators() abort
  if !exists('*operator#user#define_ex_command') | return | endif

  call operator#user#define_ex_command('sort', 'sort')
  call operator#user#define_ex_command('sort-uniq', 'sort u')
endfunction

map <Leader>sl <Plug>(operator-sort)
map <Leader>su <Plug>(operator-sort-uniq)
" }}

" vim-operator-replace {{{
map <Leader>r  <Plug>(operator-replace)
" }}}

" vim-operator-surround {{{
map <Leader>sa <Plug>(operator-surround-append)
map <Leader>sd <Plug>(operator-surround-delete)
map <Leader>sr <Plug>(operator-surround-replace)
" }}}

" vim-clang-format {{{
let g:clang_format#style_options = #{
      \   AccessModifierOffset:             -2,
      \   AlignConsecutiveAssignments:      'false',
      \   AllowShortFunctionsOnASingleLine: 'Empty',
      \   ColumnLimit:                      100,
      \   Cpp11BracedListStyle:             'true',
      \   DerivePointerAlignment:           'false',
      \   IndentPPDirectives:               'AfterHash',
      \   SortIncludes:                     'false',
      \   SpacesBeforeTrailingComments:     1,
      \ }
" }}}

" vim-markdown {{{
let g:vim_markdown_conceal                 = 0
let g:vim_markdown_folding_disabled        = 0
let g:vim_markdown_frontmatter             = 1
let g:vim_markdown_new_list_item_indent    = 0
let g:vim_markdown_no_default_key_mappings = 1
" }}}

" vim-markdown-composer {{{
let g:markdown_composer_autostart    = 0
let g:markdown_composer_open_browser = 1
" }}}

" rust.vim {{{
let g:loaded_rust_vim_plugin_cargo = 1
" }}}

" vim-astro {{{
let g:astro_typescript = 'enable'
" }}}
" }}}
